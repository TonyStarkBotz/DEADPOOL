from pyrogram import Client, filters, enums
from pyrogram.errors import ChatAdminRequired
from pyrogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from pyrogram.errors.exceptions.bad_request_400 import MessageTooLong, PeerIdInvalid, UserNotParticipant, MediaEmpty, PhotoInvalidDimensions, WebpageMediaEmpty

from info import ADMINS, LOG_CHANNEL, SUPPORT_CHAT, WELCOM_PIC, WELCOM_TEXT, IMDB_TEMPLATE
from utils import get_size, temp, extract_user, get_file_id, get_poster, humanbytes
from database.users_chats_db import db
from database.ia_filterdb import Media
from datetime import datetime
from Script import script
import logging, re, asyncio, time, shutil, psutil, os, sys

logger = logging.getLogger(__name__)
logger.setLevel(logging.ERROR)


@Client.on_message(filters.new_chat_members & filters.group)
async def savegroup_and_welcome(bot, message):
    r_j_check = [u.id for u in message.new_chat_members]
    if bot.id in r_j_check:
        if not await db.get_chat(message.chat.id):
            total=await bot.get_chat_members_count(message.chat.id)
            r_j = message.from_user.mention if message.from_user else "Anonymous" 
            await bot.send_message(LOG_CHANNEL, script.LOG_TEXT_G.format(a=message.chat.title, b=message.chat.id, c=message.chat.username, d=total, e=r_j, f=bot.mention))       
            await db.add_chat(message.chat.id, message.chat.title, message.chat.username)
        if message.chat.id in temp.BANNED_CHATS:
            buttons = [[InlineKeyboardButton('S·¥ú·¥©·¥©·¥è Ä·¥õ', url=f'https://t.me/{SUPPORT_CHAT}')]]
            k = await message.reply("CHAT NOT ALLOWED üêû\n\nM è A·¥Ö·¥ç…™…¥s H·¥Äs R·¥ás·¥õ Ä…™·¥Ñ·¥õ·¥á·¥Ö M·¥á F Ä·¥è·¥ç W·¥è Ä·¥ã…™…¥…¢ H·¥á Ä·¥á ! I“ì Y·¥è·¥ú W·¥Ä…¥·¥õ T·¥è K…¥·¥è·¥° M·¥è Ä·¥á A ô·¥è·¥ú·¥õ I·¥õ C·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ S·¥ú·¥ò·¥ò·¥è Ä·¥õ", reply_markup=InlineKeyboardMarkup(buttons))
            try: await k.pin()
            except: pass
            return await bot.leave_chat(message.chat.id)
           
        buttons = [[InlineKeyboardButton('H·¥á ü·¥©', url=f"https://t.me/{temp.U_NAME}?start=help")]]
        await message.reply(text="‚ù§Ô∏è T ú·¥Ä…¥·¥ãs T·¥è A·¥Ö·¥Ö M·¥á T·¥è Y·¥è·¥ú' Ä G Ä·¥è·¥ú·¥ò.\n¬ª D·¥è…¥'·¥õ F·¥è Ä…¢·¥á·¥õ T·¥è M·¥Ä·¥ã·¥á M·¥á A·¥Ö·¥ç…™…¥.\n¬ª Is A…¥ è D·¥è·¥ú ô·¥õ's A ô·¥è·¥ú·¥õ Us…™…¥…¢ M·¥á C ü…™·¥Ñ·¥ã B·¥á ü·¥è·¥° B·¥ú·¥õ·¥õ·¥è…¥...‚ú®", reply_markup=InlineKeyboardMarkup(buttons))
    else:
        for u in message.new_chat_members:
            if (temp.MELCOW).get('welcome') is not None:
                try: await (temp.MELCOW['welcome']).delete()
                except: pass
            if WELCOM_PIC: temp.MELCOW['welcome'] = await message.reply_photo(photo=WELCOM_PIC, caption=WELCOM_TEXT.format(user=u.mention, chat=message.chat.title))
            else: temp.MELCOW['welcome'] = await message.reply_text(text=WELCOM_TEXT.format(user=u.mention, chat=message.chat.title))


@Client.on_message(filters.command('leave') & filters.user(ADMINS))
async def leave_a_chat(bot, message):
    if len(message.command) == 1: return await message.reply('G…™·¥†·¥á M·¥á A C ú·¥Ä·¥õ I·¥Ö')
    chat = message.command[1]
    try: chat = int(chat)
    except: chat = chat
    try:
        buttons = [[InlineKeyboardButton('S·¥ú·¥©·¥©·¥è Ä·¥õ', url=f'https://t.me/{SUPPORT_CHAT}')]]
        await bot.send_message(chat_id=chat, text='<b>H·¥á ü ü·¥è F Ä…™·¥á…¥·¥Ös, \nM è A·¥Ö·¥ç…™…¥ H·¥Äs T·¥è ü·¥Ö M·¥á T·¥è L·¥á·¥Ä·¥†·¥á F Ä·¥è·¥ç G Ä·¥è·¥ú·¥ò S·¥è I G·¥è! I“ì Y·¥è·¥ú W·¥Ä…¥…¥·¥Ä A·¥Ö·¥Ö M·¥á A…¢·¥Ä…™…¥ C·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ M è S·¥ú·¥ò·¥ò·¥è Ä·¥õ G Ä·¥è·¥ú·¥ò</b>', reply_markup=InlineKeyboardMarkup(buttons))
        await bot.leave_chat(chat)
    except Exception as e:
        await message.reply(f'E Ä Ä·¥è Ä: {e}')

@Client.on_message(filters.command('disable') & filters.user(ADMINS))
async def disable_chat(bot, message):
    if len(message.command) == 1: return await message.reply('G…™·¥†·¥á M·¥á A C ú·¥Ä·¥õ I·¥Ö')
    r = message.text.split(None)
    if len(r) > 2:
        reason = message.text.split(None, 2)[2]
        chat = message.text.split(None, 2)[1]
    else:
        chat = message.command[1]
        reason = "No Reason Provided"
    try:
        chat_ = int(chat)
    except:
        return await message.reply('G…™·¥†·¥á M·¥á A V·¥Ä ü…™·¥Ö C ú·¥Ä·¥õ ID')
    cha_t = await db.get_chat(int(chat_))
    if not cha_t:
        return await message.reply("C ú·¥Ä·¥õ N·¥è·¥õ F·¥è·¥ú…¥·¥Ö I…¥ DB")
    if cha_t['is_disabled']:
        return await message.reply(f"T ú…™Íú± C ú·¥Ä·¥õ Is A ü Ä·¥á·¥Ö è  D…™Íú±·¥Ä ô ü·¥á·¥Ö:\nR·¥á·¥ÄÍú±·¥è…¥: <code> {cha_t['reason']} </code>")
    await db.disable_chat(int(chat_), reason)
    temp.BANNED_CHATS.append(int(chat_))
    await message.reply('C ú·¥Ä·¥õ S·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú∞·¥ú ü ü è D…™Íú±·¥Ä ô ü·¥á·¥Ö')
    try:
        buttons = [[InlineKeyboardButton('S·¥ú·¥©·¥©·¥è Ä·¥õ', url=f'https://t.me/{SUPPORT_CHAT}')]]
        await bot.send_message(chat_id=chat_,  text=f'<b>H·¥á ü ü·¥è F Ä…™·¥á…¥·¥Ös, \n·¥ç è A·¥Ö·¥ç…™…¥ H·¥Äs T·¥è ü·¥Ö M·¥á T·¥è L·¥á·¥Ä·¥†·¥á F Ä·¥è·¥ç G Ä·¥è·¥ú·¥ò S·¥è I G·¥è! I“ì Y·¥è·¥ú W·¥Ä…¥…¥·¥Ä A·¥Ö·¥Ö M·¥á A…¢·¥Ä…™…¥ C·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ M è S·¥ú·¥ò·¥ò·¥è Ä·¥õ G Ä·¥è·¥ú·¥ò.</b> \nR·¥á·¥ÄÍú±·¥è…¥ : <code>{reason}</code>', reply_markup=InlineKeyboardMarkup(buttons))
        await bot.leave_chat(chat_)
    except Exception as e:
        await message.reply(f"E Ä Ä·¥è Ä: {e}")


@Client.on_message(filters.command('enable') & filters.user(ADMINS))
async def re_enable_chat(bot, message):
    if len(message.command) == 1: return await message.reply('G…™·¥†·¥á M·¥á A C ú·¥Ä·¥õ I·¥Ö')
    chat = message.command[1]
    try: chat_ = int(chat)
    except: return await message.reply('G…™·¥†·¥á M·¥á A V·¥Ä ü…™·¥Ö C ú·¥Ä·¥õ ID')
    sts = await db.get_chat(int(chat))
    if not sts: return await message.reply("C ú·¥Ä·¥õ N·¥è·¥õ F·¥è·¥ú…¥·¥Ö I…¥ DB")
    if not sts.get('is_disabled'):
        return await message.reply('T ú…™Íú± C ú·¥Ä·¥õ IÍú± N·¥è·¥õ Y·¥á·¥õ D…™Íú±·¥Ä ô ü·¥á·¥Ö')
    await db.re_enable_chat(int(chat_))
    temp.BANNED_CHATS.remove(int(chat_))
    await message.reply("C ú·¥Ä·¥õ S·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú∞·¥ú ü ü è R·¥á-E…¥·¥Ä ô ü·¥á·¥Ö")


@Client.on_message(filters.command('stats') & filters.incoming)
async def get_ststs(bot, message):
    rju = await message.reply('<b>P ü·¥á·¥ÄÍú±·¥á W·¥Ä…™·¥õ...</b>')
    total_users = await db.total_users_count()
    totl_chats = await db.total_chat_count()
    files = await Media.count_documents()
    size = await db.get_db_size()
    free = 536870912 - size
    size = get_size(size)
    free = get_size(free)
    await rju.edit(script.STATUS_TXT.format(files, total_users, totl_chats, size, free))


@Client.on_message(filters.command('invite') & filters.user(ADMINS))
async def gen_invite(bot, message):
    if len(message.command) == 1: return await message.reply('G…™·¥†·¥á M·¥á A C ú·¥Ä·¥õ I·¥Ö')
    chat = message.command[1]
    try: chat = int(chat)
    except: return await message.reply('G…™·¥†·¥á M·¥á A V·¥Ä ü…™·¥Ö C ú·¥Ä·¥õ ID')
    try:
        link = await bot.create_chat_invite_link(chat)
    except ChatAdminRequired:
        return await message.reply("I…¥·¥†…™·¥õ·¥á L…™…¥·¥ã G·¥á…¥·¥á Ä·¥Ä·¥õ…™·¥è…¥ F·¥Ä…™ ü·¥á·¥Ö, I·¥Ä·¥ç N·¥è·¥õ H·¥Ä·¥†…™…¥…¢ S·¥ú“ì“ì…™·¥Ñ…™·¥á…¥·¥õ R…™…¢ ú·¥õs")
    except Exception as e:
        return await message.reply(f'E Ä Ä·¥è Ä: {e}')
    await message.reply(f'H·¥á Ä·¥á IÍú± Y·¥è·¥ú Ä I…¥·¥†…™·¥õ·¥á L…™…¥·¥ã: {link.invite_link}')

@Client.on_message(filters.command('ban_user') & filters.user(ADMINS))
async def ban_a_user(bot, message):
    if len(message.command) == 1: return await message.reply('G…™·¥†·¥á M·¥á A UÍú±·¥á Ä I·¥Ö / UÍú±·¥á Ä…¥·¥Ä·¥ç·¥á')
    r = message.text.split(None)
    if len(r) > 2:
        reason = message.text.split(None, 2)[2]
        chat = message.text.split(None, 2)[1]
    else:
        chat = message.command[1]
        reason = "No reason Provided"
    try: chat = int(chat)
    except: pass
    try: k = await bot.get_users(chat)
    except PeerIdInvalid: return await message.reply("T ú…™s Is A…¥ I…¥·¥†·¥Ä ü…™·¥Ö Us·¥á Ä, M·¥Ä·¥ã·¥á S·¥ú Ä·¥á I·¥Ä H·¥Ä·¥†·¥á M·¥á·¥õ H…™·¥ç B·¥á“ì·¥è Ä·¥á")
    except IndexError: return await message.reply("T ú…™s M…™…¢ ú·¥õ B·¥á A C ú·¥Ä…¥…¥·¥á ü, M·¥Ä·¥ã·¥á S·¥ú Ä·¥á I·¥õs A Us·¥á Ä.")
    except Exception as e: return await message.reply(f'E Ä Ä·¥è Ä: {e}')
    else:
        jar = await db.get_ban_status(k.id)
        if jar['is_banned']: return await message.reply(f"{k.mention} IÍú± A ü Ä·¥á·¥Ö è B·¥Ä…¥…¥·¥á·¥Ö\nR·¥á·¥ÄÍú±·¥è…¥: {jar['ban_reason']}")
        await db.ban_user(k.id, reason)
        temp.BANNED_USERS.append(k.id)
        await message.reply(f"S·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú∞·¥ú ü ü è B·¥Ä…¥…¥·¥á·¥Ö {k.mention}")


    
@Client.on_message(filters.command('unban_user') & filters.user(ADMINS))
async def unban_a_user(bot, message):
    if len(message.command) == 1: return await message.reply('G…™·¥†·¥á M·¥á A UÍú±·¥á Ä I·¥Ö / UÍú±·¥á Ä…¥·¥Ä·¥ç·¥á')
    r = message.text.split(None)
    if len(r) > 2:
        reason = message.text.split(None, 2)[2]
        chat = message.text.split(None, 2)[1]
    else:
        chat = message.command[1]
        reason = "No reason Provided"
    try: chat = int(chat)
    except: pass
    try: k = await bot.get_users(chat)
    except PeerIdInvalid: return await message.reply("T ú…™s Is A…¥ I…¥·¥†·¥Ä ü…™·¥Ö Us·¥á Ä, M·¥Ä·¥ã·¥á S·¥ú Ä·¥á I·¥Ä H·¥Ä·¥†·¥á M·¥á·¥õ H…™·¥ç B·¥á“ì·¥è Ä·¥á")
    except IndexError: return await message.reply("T ú…™s M…™…¢ ú·¥õ B·¥á A C ú·¥Ä…¥…¥·¥á ü, M·¥Ä·¥ã·¥á S·¥ú Ä·¥á I·¥õs A Us·¥á Ä.")
    except Exception as e: return await message.reply(f'E Ä Ä·¥è Ä: {e}')
    else:
        jar = await db.get_ban_status(k.id)
        if not jar['is_banned']: return await message.reply(f"{k.mention} IÍú± N·¥è·¥õ Y·¥á·¥õ B·¥Ä…¥…¥·¥á·¥Ö")
        await db.remove_ban(k.id)
        temp.BANNED_USERS.remove(k.id)
        await message.reply(f"S·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú∞·¥ú ü ü è U…¥ ô·¥Ä…¥…¥·¥á·¥Ö {k.mention}")


    
@Client.on_message(filters.command('users') & filters.user(ADMINS))
async def list_users(bot, message):
    sps = await message.reply('G·¥á·¥õ·¥õ…™…¥…¢ L…™Íú±·¥õ OÍú∞ UÍú±·¥á ÄÍú±')
    users = await db.get_all_users()
    out = "UÍú±·¥á ÄÍú± S·¥Ä·¥†·¥á·¥Ö I…¥ DB A Ä·¥á:\n\n"
    async for user in users:
        out += f"<a href=tg://user?id={user['id']}>{user['name']}</a>\n"
    try:
        await sps.edit_text(out)
    except MessageTooLong:
        with open('users.txt', 'w+') as outfile:
            outfile.write(out)
        await message.reply_document('users.txt', caption="L…™Íú±·¥õ OÍú∞ UÍú±·¥á ÄÍú±")

@Client.on_message(filters.command('chats') & filters.user(ADMINS))
async def list_chats(bot, message):
    sps = await message.reply('G·¥á·¥õ·¥õ…™…¥…¢ L…™Íú±·¥õ OÍú∞ C ú·¥Ä·¥õÍú±')
    chats = await db.get_all_chats()
    out = "C ú·¥Ä·¥õÍú± S·¥Ä·¥†·¥á·¥Ö I…¥ DB A Ä·¥á:\n\n"
    async for chat in chats:
        username = chat['username']
        username = "private" if not username else "@" + username
        out += f"**- T…™·¥õ ü·¥á:** `{chat['title']}`\n**- ID:** `{chat['id']}`\n**UÍú±·¥á Ä…¥·¥Ä·¥ç·¥á:** {username}\n"
    try:
        await sps.edit_text(out)
    except MessageTooLong:
        with open('chats.txt', 'w+') as outfile:
            outfile.write(out)
        await message.reply_document('chats.txt', caption="L…™Íú±·¥õ OÍú∞ C ú·¥Ä·¥õÍú±")



@Client.on_message(filters.command('id'))
async def show_id(client, message):
    chat_type = message.chat.type
    if chat_type == enums.ChatType.PRIVATE:
        user_id = message.chat.id
        first = message.from_user.first_name
        last = message.from_user.last_name or ""
        username = message.from_user.username
        dc_id = message.from_user.dc_id or ""
        await message.reply_text(f"<b>‚û≤ Íú∞…™ ÄÍú±·¥õ …¥·¥Ä·¥ç·¥á:</b> {first}\n<b>‚û≤  ü·¥ÄÍú±·¥õ …¥·¥Ä·¥ç·¥á:</b> {last}\n<b>‚û≤ ·¥úÍú±·¥á Ä…¥·¥Ä·¥ç·¥á:</b> {username}\n<b>‚û≤ ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç …™·¥Ö:</b> <code>{user_id}</code>\n<b>‚û≤ ·¥Ö·¥Ñ …™·¥Ö:</b> <code>{dc_id}</code>", quote=True)

    elif chat_type in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
        _id = ""
        _id += f"<b>‚û≤ ·¥Ñ ú·¥Ä·¥õ …™·¥Ö</b>: <code>{message.chat.id}</code>\n"
        
        if message.reply_to_message:
            _id += (
                "<b>‚û≤ ·¥úÍú±·¥á Ä …™·¥Ö</b>: "
                f"<code>{message.from_user.id if message.from_user else 'Anonymous'}</code>\n"
                "<b>‚û≤  Ä·¥á·¥© ü…™·¥á·¥Ö ·¥úÍú±·¥á Ä …™·¥Ö</b>: "
                f"<code>{message.reply_to_message.from_user.id if message.reply_to_message.from_user else 'Anonymous'}</code>\n"
            )
            file_info = get_file_id(message.reply_to_message)
        else:
            _id += (
                "<b>‚û≤ ·¥úÍú±·¥á Ä …™·¥Ö</b>: "
                f"<code>{message.from_user.id if message.from_user else 'Anonymous'}</code>\n"
            )
            file_info = get_file_id(message)
        if file_info:
            _id += (
                f"<b>{file_info.message_type}</b>: "
                f"<code>{file_info.file_id}</code>\n"
            )
        await message.reply_text(_id, quote=True)
            

@Client.on_message(filters.command(["info"]))
async def user_info(client, message):
    status_message = await message.reply_text("`·¥© ü·¥á·¥ÄÍú±·¥á ·¥°·¥Ä…™·¥õ....`")
    from_user = None
    from_user_id, _ = extract_user(message)
    try:
        from_user = await client.get_users(from_user_id)
    except Exception as error:
        return await status_message.edit(str(error))
    if from_user is None:
        return await status_message.edit("…¥·¥è ·¥†·¥Ä ü…™·¥Ö ·¥ús·¥á Ä_…™·¥Ö / ·¥ç·¥áss·¥Ä…¢·¥á s·¥ò·¥á·¥Ñ…™“ì…™·¥á·¥Ö")
    message_out_str = ""
    message_out_str += f"<b>‚û≤Íú∞…™ ÄÍú±·¥õ …¥·¥Ä·¥ç·¥á:</b> {from_user.first_name}\n"
    last_name = from_user.last_name or "<b>…¥·¥è…¥·¥á</b>"
    message_out_str += f"<b>‚û≤ ü·¥ÄÍú±·¥õ …¥·¥Ä·¥ç·¥á:</b> {last_name}\n"
    message_out_str += f"<b>‚û≤·¥õ…¢-…™·¥Ö:</b> <code>{from_user.id}</code>\n"
    username = from_user.username or "<b>…¥·¥è…¥·¥á</b>"
    dc_id = from_user.dc_id or "[·¥úÍú±·¥á Ä ·¥Ö·¥èÍú±·¥á'·¥õ  ú·¥Ä·¥†·¥á ·¥Ä ·¥†·¥Ä ü…™·¥Ö ·¥Ö·¥©]"
    message_out_str += f"<b>‚û≤·¥Ö·¥Ñ-…™·¥Ö:</b> <code>{dc_id}</code>\n"
    message_out_str += f"<b>‚û≤·¥úÍú±·¥á Ä…¥·¥Ä·¥ç·¥á:</b> @{username}\n"
    message_out_str += f"<b>‚û≤·¥úÍú±·¥á Ä  ü…™…¥·¥ã:</b> <a href='tg://user?id={from_user.id}'><b>·¥Ñ ü…™·¥Ñ·¥ã  ú·¥á Ä·¥á</b></a>\n"
    if message.chat.type in ((enums.ChatType.SUPERGROUP, enums.ChatType.CHANNEL)):
        try:
            chat_member_p = await message.chat.get_member(from_user.id)
            joined_date = (chat_member_p.joined_date or datetime.now()).strftime("%Y.%m.%d %H:%M:%S")
            message_out_str += f"<b>‚û≤·¥ä·¥è…™…¥·¥á·¥Ö ·¥õ ú…™Íú± ·¥Ñ ú·¥Ä·¥õ ·¥è…¥:</b> <code>{joined_date}</code>\n"
        except UserNotParticipant: pass
    chat_photo = from_user.photo
    if chat_photo:
        local_user_photo = await client.download_media(message=chat_photo.big_file_id)
        buttons = [[InlineKeyboardButton('·¥Ñ ü·¥èÍú±·¥á ‚úò', callback_data='close_data')]]
        await message.reply_photo(
            photo=local_user_photo,
            quote=True,
            reply_markup=InlineKeyboardMarkup(buttons),
            caption=message_out_str,
            parse_mode=enums.ParseMode.HTML,
            disable_notification=True
        )
        os.remove(local_user_photo)
    else:
        buttons = [[InlineKeyboardButton('·¥Ñ ü·¥èÍú±·¥á ‚úò', callback_data='close_data')]]
        await message.reply_text(
            text=message_out_str,
            reply_markup=InlineKeyboardMarkup(buttons),
            quote=True,
            parse_mode=enums.ParseMode.HTML,
            disable_notification=True
        )
    await status_message.delete()

@Client.on_message(filters.command(["imdb", 'search']))
async def imdb_search(client, message):
    if ' ' in message.text:
        k = await message.reply('Íú±·¥á·¥Ä Ä·¥Ñ ú…™…¥…¢ …™·¥ç·¥Ö ô..')
        r, title = message.text.split(None, 1)
        movies = await get_poster(title, bulk=True)
        if not movies:
            return await message.reply("…¥·¥è  Ä·¥áÍú±·¥ú ü·¥õ Íú∞·¥è·¥ú…¥·¥Ö")
        btn = [[InlineKeyboardButton(f"{movie.get('title')} - {movie.get('year')}", callback_data=f"imdb#{movie.movieID}")] for movie in movies ]
        await k.edit('H·¥á Ä·¥á Is W ú·¥Ä·¥õ I F·¥è·¥ú…¥·¥Ö O…¥ I·¥ç·¥Ö ô', reply_markup=InlineKeyboardMarkup(btn))
    else:
        await message.reply('G…™·¥†·¥á M·¥á A M·¥è·¥†…™·¥á / S·¥á Ä…™·¥ás N·¥Ä·¥ç·¥á')


@Client.on_callback_query(filters.regex('^imdb'))
async def imdb_callback(bot: Client, quer_y: CallbackQuery):
    i, movie = quer_y.data.split('#')
    imdb = await get_poster(query=movie, id=True)
    btn = [[InlineKeyboardButton(f"{imdb.get('title')}", url=imdb['url'])]]
    message = quer_y.message.reply_to_message or quer_y.message
    if imdb:
        caption = IMDB_TEMPLATE.format(
            query = imdb['title'],
            title = imdb['title'],
            votes = imdb['votes'],
            aka = imdb["aka"],
            seasons = imdb["seasons"],
            box_office = imdb['box_office'],
            localized_title = imdb['localized_title'],
            kind = imdb['kind'],
            imdb_id = imdb["imdb_id"],
            cast = imdb["cast"],
            runtime = imdb["runtime"],
            countries = imdb["countries"],
            certificates = imdb["certificates"],
            languages = imdb["languages"],
            director = imdb["director"],
            writer = imdb["writer"],
            producer = imdb["producer"],
            composer = imdb["composer"],
            cinematographer = imdb["cinematographer"],
            music_team = imdb["music_team"],
            distributors = imdb["distributors"],
            release_date = imdb['release_date'],
            year = imdb['year'],
            genres = imdb['genres'],
            poster = imdb['poster'],
            plot = imdb['plot'],
            rating = imdb['rating'],
            url = imdb['url'],
            **locals()
        )
    else:
        caption = "…¥·¥è  Ä·¥áÍú±·¥ú ü·¥õÍú±"
    if imdb.get('poster'):
        try:
            await quer_y.message.reply_photo(photo=imdb['poster'], caption=caption, reply_markup=InlineKeyboardMarkup(btn))
        except (MediaEmpty, PhotoInvalidDimensions, WebpageMediaEmpty):
            pic = imdb.get('poster')
            poster = pic.replace('.jpg', "._V1_UX360.jpg")
            await quer_y.message.reply_photo(photo=poster, caption=caption, reply_markup=InlineKeyboardMarkup(btn))
        except Exception as e:
            logger.exception(e)
            await quer_y.message.reply(caption, reply_markup=InlineKeyboardMarkup(btn), disable_web_page_preview=False)
        await quer_y.message.delete()
    else:
        await quer_y.message.edit(caption, reply_markup=InlineKeyboardMarkup(btn), disable_web_page_preview=False)
   
   
@Client.on_message(filters.command('logs') & filters.user(ADMINS))
async def log_file(bot, msg):
    try: await message.reply_document('BotLog.txt')
    except Exception as e: await message.reply(str(e))


@Client.on_message(filters.command("restart") & filters.user(ADMINS))
async def restart_bot(bot, msg):
    await msg.reply("R·¥áÍú±·¥õ·¥Ä·¥õ…™…¥…¢........")
    await asyncio.sleep(2)
    await sts.delete()
    os.execl(sys.executable, sys.executable, *sys.argv)



        



